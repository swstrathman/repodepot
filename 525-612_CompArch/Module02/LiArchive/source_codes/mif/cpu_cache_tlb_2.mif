%****************************************************%
%  The MIF code example shown here is from the book  %
%  Computer Principles and Design in Verilog HDL     %
%  by Yamin Li, published by A JOHN WILEY & SONS     %
%****************************************************%
DEPTH = 128;         % Memory depth and width are required                 %
WIDTH = 32;          % Enter a decimal number                              %
ADDRESS_RADIX = HEX; % Address and value radixes are optional              %
DATA_RADIX = HEX;    % Enter BIN, DEC, HEX, or OCT; unless                 %
CONTENT              % otherwise specified, radixes = HEX                  %
BEGIN
    % physical address = 0x2000_0000                                       %
    % test program  va = 0x0000_0000                                       %
 0: 20011100; %(00000000)      addi  $1, $0,0x1100 # address of data[0]    %
 1: c4200000; %(00000004)      lwc1  f0,  0x0($1)  # load fp data          %
 2: c4210050; %(00000008)      lwc1  f1, 0x50($1)  # load fp data          %
 3: c4220054; %(0000000c)      lwc1  f2, 0x54($1)  # load fp data          %
 4: c4230058; %(00000010)      lwc1  f3, 0x58($1)  # load fp data          %
 5: c424005c; %(00000014)      lwc1  f4, 0x5c($1)  # load fp data          %
 6: 46002100; %(00000018)      add.s f4,  f4, f0   # f4: stall 1           %
 7: 460418c1; %(0000001c)      sub.s f3,  f3, f4   # f4: stall 2           %
 8: 46022082; %(00000020)      mul.s f2,  f4, f2   # mul                   %
 9: 46040842; %(00000024)      mul.s f1,  f1, f4   # mul                   %
 a: e4210070; %(00000028)      swc1  f1, 0x70($1)  # f1: stall 1           %
 b: e4220074; %(0000002c)      swc1  f2, 0x74($1)  # store fp data         %
 c: e4230078; %(00000030)      swc1  f3, 0x78($1)  # store fp data         %
 d: e424007c; %(00000034)      swc1  f4, 0x7c($1)  # store fp data         %
 e: 20020004; %(00000038)      addi  $2,  $0,  4   # counter               %
 f: c4230000; %(0000003c)l3:   lwc1  f3, 0x0($1)   # load fp data          %
10: c4210050; %(00000040)      lwc1  f1, 0x50($1)  # load fp data          %
11: 46030840; %(00000044)      add.s f1,  f1, f3   # stall 1               %
12: 46030841; %(00000048)      sub.s f1,  f1, f3   # stall 2               %
13: e4210030; %(0000004c)      swc1  f1,  0x30($1) # stall 1               %
14: c4051104; %(00000050)      lwc1  f5,0x1104($0) # load fp data          %
15: c4061108; %(00000054)      lwc1  f6,0x1108($0) # load fp data          %
16: c408110c; %(00000058)      lwc1  f8,0x110c($0) # load fp data          %
17: 460629c3; %(0000005c)      div.s f7,  f5, f6   # div                   %
18: 46004244; %(00000060)      sqrt.s f9,  f8      # sqrt                  %
19: 46004a84; %(00000064)      sqrt.s f10, f9      # sqrt                  %
1a: 2042ffff; %(00000068)      addi  $2,  $2, -1   # counter - 1           %
1b: 1440fff3; %(0000006c)      bne   $2,  $0, l3   # finish?               %
1c: 20210004; %(00000070)      addi  $1,  $1,  4   # address+4, delay slot %
1d: 3c010000; %(00000074)iu_test: lui $1, 0        # address of data[0]    %
1e: 34241150; %(00000078)      ori $4, $1, 0x1150  # address of data[0]    %
1f: 0c000038; %(0000007c)call: jal  sum            # call function         %
20: 20050004; %(00000080)dslot1: addi $5,$0,4      # delyed slot(ds)       %
21: ac820000; %(00000084)return: sw $2, 0($4)      # store result          %
22: 8c890000; %(00000088)      lw   $9, 0($4)      # check sw              %
23: 01244022; %(0000008c)      sub  $8, $9, $4     # sub: $8 <-- $9 - $4   %
24: 20050003; %(00000090)      addi $5, $0,  3     # counter               %
25: 20a5ffff; %(00000094)loop2: addi $5,$5,-1      # counter - 1           %
26: 34a8ffff; %(00000098)      ori  $8, $5, 0xffff # zero-extend: 0000ffff %
27: 39085555; %(0000009c)      xori $8, $8, 0x5555 # zero-extend: 0000aaaa %
28: 2009ffff; %(000000a0)      addi $9, $0, -1     # sign-extend: ffffffff %
29: 312affff; %(000000a4)      andi $10, $9,0xffff # zero-extend: 0000ffff %
2a: 01493025; %(000000a8)      or   $6, $10, $9    # or:  ffffffff         %
2b: 01494026; %(000000ac)      xor  $8, $10, $9    # xor: ffff0000         %
2c: 01463824; %(000000b0)      and  $7, $10, $6    # and: 0000ffff         %
2d: 10a00003; %(000000b4)      beq  $5, $0, shift  # if $5 = 0, goto shift %
2e: 00000000; %(000000b8)dslot2: nop               # ds                    %
2f: 08000025; %(000000bc)      j    loop2          # jump loop2            %
30: 00000000; %(000000c0)dslot3: nop               # ds                    %
31: 2005ffff; %(000000c4)shift: addi $5,$0,-1      # $5     = ffffffff     %
32: 000543c0; %(000000c8)      sll  $8, $5, 15     # <<  15 = ffff8000     %
33: 00084400; %(000000cc)      sll  $8, $8, 16     # <<  16 = 80000000     %
34: 00084403; %(000000d0)      sra  $8, $8, 16     # >>> 16 = ffff8000     %
35: 00084c32; %(000000d4)      srl  $8, $8, 15     # >>  15 = 0001ffff     %
36: 08000036; %(000000d8)finish: j finish          # dead loop             %
37: 00000000; %(000000dc)dslot4: nop               # ds                    %
38: 00004020; %(000000e0)sum: add  $8, $0, $0      # sum                   %
39: 8c890000; %(000000e4)loop: lw $9, 0($4)        # load data             %
3a: 01094020; %(000000e8)      add  $8, $8, $9     # sum                   %
3b: 20a5ffff; %(000000ec)      addi $5, $5, -1     # counter - 1           %
3c: 14a0fffc; %(000000f0)      bne  $5, $0, loop   # finish?               %
3d: 20840004; %(000000f4)dslot5: addi $4, $4, 4    # address + 4, ds       %
3e: 03e00008; %(000000f8)      jr   $31            # return                %
3f: 00081000; %(000000fc)dslot6: sll $2, $8, 0     # move res. to v0, ds   %
[40..7f]: 0;
END ;
